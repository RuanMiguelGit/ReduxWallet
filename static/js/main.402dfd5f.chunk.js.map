{"version":3,"sources":["pages/Login.js","actions/index.js","components/Header.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","props","state","email","password","shouldRedirect","loading","Change","this","setState","to","className","htmlFor","data-testid","type","id","value","onChange","e","target","placeholder","disabled","length","match","onClick","changeHandler","React","Component","connect","dispatch","payload","userEmail","Header","emailDisplay","HeaderTotal","expensesData","reduce","acc","cur","exchangeRates","currency","ask","parseFloat","user","wallet","expenses","Table","remover","map","item","key","description","tag","method","name","toFixed","currencyData","currencies","delete","removeExpense","Wallet","GetCurrency","undefined","Object","keys","values","filter","el","code","expense","Getexpense","sumDealer","buttonHandler","inputExpense","inputDescription","inputMethod","inputCurrency","inputTag","inputButton","a","fetch","response","json","reponsejson","data","expenseData","addExpense","App","exact","path","component","Boolean","window","location","hostname","InitialState","action","INITIAL_STATE","error","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.402dfd5f.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { userEmail } from '../actions';\nimport '../pages/Login.css'\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      shouldRedirect: false,\n      loading: false,\n    };\n  }\n\n  changeHandler() {\n    const { Change } = this.props;\n    const { email } = this.state;\n\n    Change(email);\n    this.setState({ shouldRedirect: true, loading: true });\n  }\n\n  render() {\n    const { shouldRedirect, loading } = this.state;\n    if (shouldRedirect === true) {\n      return <Redirect to=\"/carteira\" />;\n    }\n    if (loading === true) {\n      return <div>Carregando ....</div>;\n    }\n\n    const { email, password } = this.state;\n    const limite = 5;\n    return (\n      <div className=\"Login\">\n        <form>\n          <label htmlFor=\"input-mail\">\n            {\" \"}\n            <input\n              data-testid=\"email-input\"\n              type=\"text\"\n              id=\"input-mail\"\n              className='InputLg'\n              value={email}\n              onChange={(e) => this.setState({ email: e.target.value })}\n              placeholder=\"email\"\n            />\n          </label>\n          <label htmlFor=\"input-pass\">\n\n            <input\n              data-testid=\"password-input\"\n              value={password}\n              type=\"password\"\n              className='InputLg'\n              onChange={(e) => this.setState({ password: e.target.value })}\n              placeholder=\"senha\"\n            />\n          </label>\n        </form>\n        <div className=\"link\">\n          <button\n            type=\"button\"\n            className='loginButton'\n            disabled={password.length <= limite\n              || !email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i)}\n            onClick={() => this.changeHandler(email)}\n          >\n            Entrar\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  Change: (value) => dispatch(userEmail(value)),\n});\n\nLogin.propTypes = {\n  Change: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","// Coloque aqui suas actions\nexport const userEmail = (value) => ({\n  type: 'USER_EMAIL',\n  payload: {\n    userEmail: value,\n  },\n});\n\nexport const getData = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: 'REQUEST_LOADING',\n    });\n\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const reponsejson = await response.json();\n\n    dispatch({\n      type: 'REQUEST_SUCESS',\n      payload: {\n        data: reponsejson,\n\n      },\n    });\n  } catch (e) {\n    dispatch({\n\n      type: 'REQUEST_FAIL',\n    });\n  }\n};\n\nexport const addExpense = (value) => ({\n  type: 'ADD_EXPENSE',\n  payload: {\n    expenseData: value,\n  },\n});\n\nexport const removeExpense = (id) => ({\n  type: 'REMOVE_EXPENSE',\n  payload: {\n    delete: id,\n  },\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../components/Header.css'\nclass Header extends React.Component {\n  render() {\n    const { emailDisplay, expensesData } = this.props;\n    const HeaderTotal = expensesData\n      .reduce((acc, cur) => acc + cur.value * cur.exchangeRates[cur.currency].ask, 0);\n\n    return (\n      <div>\n\n        <section\n          data-testid=\"email-field\"\n          className='userName'\n        >\n          {' '}\n          Email do usuario:\n          {' '}\n          {emailDisplay}\n        </section>\n\n        <section\n          data-testid=\"total-field\"\n          className='totalfi'\n        >\n          {' '}\n          {(parseFloat(HeaderTotal))}\n        </section>\n\n        <section\n          data-testid=\"header-currency-field\"\n          className='totalfi'\n        >\n          {' '}\n          BRL\n        </section>\n\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  emailDisplay: state.user.email,\n  expensesData: state.wallet.expenses,\n\n});\n\nHeader.propTypes = {\n  emailDisplay: PropTypes.string.isRequired,\n  expensesData: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpense } from '../actions';\nimport '../pages/Table.css'\n\nclass Table extends React.Component {\n  render() {\n    const { expensesData, remover } = this.props;\n    return (\n\n      <table>\n        <thead className=\"TableB\">\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {expensesData.map((item) => (\n            <tr key={item.id} className='tableB'>\n              <td className='tableA'>{item.description}</td>\n              <td className='tableA'>{item.tag}</td>\n              <td className='tableA'>{item.method}</td>\n              <td className='tableA'>{item.value}</td>\n              <td className='tableA'>{item.exchangeRates[item.currency].name}</td>\n              <td className='tableA'>{parseFloat(item.exchangeRates[item.currency].ask).toFixed(2)}</td>\n              <td className=\"tableA\">\n                {parseFloat(item.exchangeRates[item.currency]\n                  .ask * item.value).toFixed(2)}\n              </td>\n              <td className=\"tableA\">Real</td>\n              <td>\n                <button\n                  type=\"button\"\n                  className=\"ButtonS\"\n                  data-testid=\"delete-btn\"\n                  onClick={() => remover(item.id)}\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencyData: state.wallet.currencies,\n  expensesData: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  remover: (id) => dispatch(removeExpense(id)),\n});\n\nTable.propTypes = {\n  expensesData: PropTypes.func.isRequired,\n  remover: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addExpense, getData } from '../actions';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport '../pages/Table.css'\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n  }\n\n  componentDidMount() {\n    const { GetCurrency } = this.props;\n    GetCurrency();\n  }\n\n  inputExpense() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"expense\">\n        {' '}\n        <input\n          className='Input'\n          data-testid=\"value-input\"\n          type=\"number\"\n          id=\"expenses\"\n          value={value}\n          onChange={(e) => this.setState({ value: e.target.value })}\n          placeholder=\"Gastos\"\n        />\n      </label>\n    );\n  }\n\n  inputDescription() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"Description\">\n        {' '}\n        <input\n          className=\"Input\"\n          data-testid=\"description-input\"\n          value={description}\n          type=\"text\"\n          onChange={(e) => this.setState({ description: e.target.value })}\n          placeholder=\"Descricão\"\n        />\n      </label>\n    );\n  }\n\n  inputCurrency() {\n    const { currency } = this.state;\n    const { currencyData } = this.props;\n    const object = Object.keys(currencyData);\n\n    if (((object) !== undefined)) {\n      return (\n\n        <select\n          className=\"Input\"\n          id=\"currency\"\n          data-testid=\"currency-input\"\n          value={currency}\n          type=\"dropbox\"\n          onChange={(e) => this.setState({ currency: e.target.value })}\n        >\n\n          {Object.values(currencyData).filter((item) => item.name !== 'Dólar Turismo')\n            .map((el) => (\n              <option key={el.code} data-testid={el.code} value={el.code}>\n                {el.code}\n              </option>\n            ))}\n        </select>\n      );\n    }\n  }\n\n  inputMethod() {\n    '';\n\n    const { method } = this.state;\n    return (\n\n      <select\n        className=\"Input\"\n        data-testid=\"method-input\"\n        value={method}\n        type=\"text\"\n        onChange={(e) => this.setState({ method: e.target.value })}\n        placeholder=\"método\"\n      >\n        <option value=\"Dinheiro\">Dinheiro</option>\n        <option value=\"Cartão de crédito\">Cartão de crédito</option>\n        <option value=\"Cartão de débito\">Cartão de débito</option>\n      </select>\n    );\n  }\n\n  inputTag() {\n    const { tag } = this.state;\n    return (\n      <select\n        className=\"Input\"\n        data-testid=\"tag-input\"\n        value={tag}\n        type=\"text\"\n        onChange={(e) => this.setState({ tag: e.target.value })}\n        placeholder=\"tag\"\n      >\n        <option value=\"Alimentação\">Alimentação</option>\n        <option value=\"Lazer\">Lazer</option>\n        <option value=\"Trabalho\">Trabalho</option>\n        <option value=\"Transporte\">Transporte</option>\n        <option value=\"Saúde\">Saúde</option>\n\n      </select>\n    );\n  }\n\n  sumDealer() {\n    const { expensesData } = this.props;\n    expensesData.map((item) => {\n      const { currency } = item;\n      const somatotal = expensesData\n        .reduce((acc, cur) => acc + cur.expense * cur.exchangeRates[currency].ask, 0);\n      return somatotal;\n    });\n  }\n\n  async buttonHandler() {\n    const { Getexpense, GetCurrency, currencyData } = this.props;\n\n    return (\n      await GetCurrency(),\n      this.setState({\n        exchangeRates: currencyData,\n      }),\n      await Getexpense(this.state),\n      this.setState({\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n        exchangeRates: {},\n      }),\n      this.sumDealer()\n    );\n  }\n\n  table() {\n    const { expensesData } = this.props;\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expensesData.map((item) => (\n              <tr key={item.id}>\n                <td>{item.description}</td>\n                <td>{item.tag}</td>\n                <td>{item.method}</td>\n                <td>{item.value}</td>\n                <td>{item.exchangeRates[item.currency].name}</td>\n                <td>{parseFloat(item.exchangeRates[item.currency].ask).toFixed(2)}</td>\n                <td>\n                  {parseFloat(item\n                    .exchangeRates[item.currency].ask * item.value).toFixed(2)}\n                </td>\n                <td>Real</td>\n                <td><button type=\"button\">Excluir</button></td>\n              </tr>))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  inputButton() {\n    return (\n      <button\n        type=\"button\"\n        className=\"ButtonS\"\n        onClick={() => this.buttonHandler()}\n      >\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  render() {\n    return (\n\n      <div>\n        <Header />\n        <div className=\"form\">\n          <form>\n            {this.inputExpense()}\n            {this.inputDescription()}\n            {this.inputMethod()}\n            {this.inputCurrency()}\n            {this.inputTag()}\n            {this.inputButton()}\n          </form>\n        </div>\n        <Table />\n\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  GetCurrency: () => dispatch(getData()),\n  Getexpense: (value) => dispatch(addExpense(value)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencyData: state.wallet.currencies,\n  expensesData: state.wallet.expenses,\n});\n\nWallet.propTypes = {\n  GetCurrency: PropTypes.func.isRequired,\n  currencyData: PropTypes.func.isRequired,\n  expensesData: PropTypes.func.isRequired,\n  Getexpense: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n// const InitialState = {\n//   user: {\n//     email: '',\n//   },\n//   wallet: {\n//     currencies: [],\n//     expenses: [],\n//   },\n// };\n\nconst InitialState = {\n  email: '',\n};\nconst user = (state = InitialState, action) => {\n  switch (action.type) {\n  case 'USER_EMAIL':\n    return {\n      ...state,\n      email: action.payload.userEmail,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n// const INITIAL_STATE = {\n//     user: {\n//       email: '',\n//     },\n//     wallet: {\n//       currencies: [],\n//       loading:false,\n//       expenses: [],\n//     },\n//   };\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'REQUEST_LOADING':\n    return {\n      ...state,\n      wallet: {\n        loading: true,\n      },\n    };\n\n  case 'REQUEST_SUCESS':\n    return {\n      ...state,\n      loading: false,\n      currencies: action.payload.data,\n\n    };\n\n  case 'REQUEST_FAIL':\n    return {\n      ...state,\n      loading: false,\n      error: 'Unable to find currency',\n    };\n\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses,\n        { id: state.expenses.length, ...action.payload.expenseData }],\n    };\n\n  case 'REMOVE_EXPENSE':\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== action.payload.delete),\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}